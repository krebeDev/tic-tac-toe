{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","calculateWinner","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"oNAKA,SAASA,EAAOC,GACR,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,O,IAKTC,E,qLACUC,GAAI,IAAD,OACf,OACI,kBAACN,EAAD,CACAI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAMxBG,EAAgBF,KAAKN,MAAMO,SACzC,OACE,6BACE,yBAAKN,UAAU,aACZK,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,IAErB,yBAAKR,UAAU,aACZK,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,IAErB,yBAAKR,UAAU,aACZK,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,S,GA3BTC,IAAMC,WAkCpBC,E,YACJ,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,QAAS,CAAC,CACRP,QAASQ,MAAM,GAAGC,KAAK,QAEzBC,WAAY,EACZC,SAAS,GAPC,E,yEAWFb,GACV,IAAMS,EAAUR,KAAKO,MAAMC,QAAQK,MAAM,EAAGb,KAAKO,MAAMI,WAAa,GAE9DV,EADUO,EAAQA,EAAQM,OAAS,GACjBb,QAAQY,QAC5BX,EAAgBD,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKO,MAAMK,QAAU,IAAM,IACxCZ,KAAKe,SAAS,CACZP,QAASA,EAAQQ,OAAO,CAAC,CACvBf,QAASA,KAEXU,WAAYH,EAAQM,OACtBF,SAAUZ,KAAKO,MAAMK,a,6BAIpBK,GACLjB,KAAKe,SAAS,CACZJ,WAAYM,EACZL,QAAUK,EAAO,IAAO,M,+BAId,IAiBJC,EAjBG,OACDV,EAAUR,KAAKO,MAAMC,QACrBW,EAAUX,EAAQR,KAAKO,MAAMI,YAC7BS,EAASlB,EAAgBiB,EAAQlB,SAEjCoB,EAAQb,EAAQc,KAAI,SAACL,EAAMM,GAC/B,IAAMC,EAAOD,EACX,eAAiBA,EACjB,oBACA,OACE,wBAAIE,IAAKF,GACP,4BAAQ3B,QAAS,kBAAM,EAAK8B,OAAOH,KAChCC,OAYX,OALEN,EADEE,EACO,WAAaA,EAEb,iBAAmBpB,KAAKO,MAAMK,QAAU,IAAM,KAIvD,yBAAKjB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CACEG,QAAWkB,EAAQlB,QACnBL,QAAS,SAACG,GAAD,OAAO,EAAK4B,YAAY5B,OAGrC,yBAAKJ,UAAU,aACb,6BAAMuB,GACN,4BAAKG,S,GAtEIjB,IAAMC,WAoFzB,SAASH,EAAgBD,GAWvB,IAVA,IAAM2B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA7B,EAAI,EAAGA,EAAI6B,EAAMd,OAAQf,IAAK,CAAC,IAAD,cACnB6B,EAAM7B,GADa,GAC9B8B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GACpE,OAAO9B,EAAQ4B,GAGnB,OAAO,KAtBTG,IAASC,OACP,kBAAC3B,EAAD,MACA4B,SAASC,eAAe,U","file":"static/js/main.eef19222.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nfunction Square(props) {\r\n        return (\r\n          <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n          </button>\r\n        );\r\n    }\r\n    \r\n    class Board extends React.Component {\r\n       renderSquare(i) {\r\n        return (\r\n            <Square \r\n            value={this.props.squares[i]} \r\n            onClick={() => this.props.onClick(i)}\r\n      />\r\n        );\r\n      }\r\n    \r\n      render() {\r\n      const winner  = calculateWinner(this.props.squares);    \r\n        return (\r\n          <div>\r\n            <div className=\"board-row\">\r\n              {this.renderSquare(0)}\r\n              {this.renderSquare(1)}\r\n              {this.renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.renderSquare(3)}\r\n              {this.renderSquare(4)}\r\n              {this.renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.renderSquare(6)}\r\n              {this.renderSquare(7)}\r\n              {this.renderSquare(8)}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    \r\n    class Game extends React.Component {\r\n      constructor() {\r\n        super();\r\n        this.state = {\r\n          history: [{ \r\n            squares: Array(9).fill(null),\r\n          }],\r\n          stepNumber: 0,\r\n          xIsNext: true,\r\n        };\r\n      }\r\n\r\n      handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n              return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n          history: history.concat([{\r\n            squares: squares,\r\n          }]),\r\n          stepNumber: history.length,\r\n        xIsNext: !this.state.xIsNext,\r\n        });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n      render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n          const desc = move ?\r\n            'Go to move #' + move : \r\n            'Got to game start';\r\n            return (\r\n              <li key={move}>\r\n                <button onClick={() => this.jumpTo(move)}>\r\n                  {desc}</button>\r\n              </li>\r\n            );\r\n        });\r\n\r\n        let status;\r\n        if (winner) {\r\n          status = 'Winner: ' + winner;\r\n        } else {\r\n          status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n          <div className=\"game\">\r\n            <div className=\"game-board\">\r\n              <Board \r\n                squares = {current.squares}\r\n                onClick={(i) => this.handleClick(i)}\r\n              />\r\n            </div>\r\n            <div className=\"game-info\">\r\n              <div>{status}</div>\r\n              <ol>{moves}</ol>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    \r\n    // ========================================\r\n    \r\n    ReactDOM.render(\r\n      <Game />,\r\n      document.getElementById('root')\r\n    );\r\n    \r\n    function calculateWinner(squares) {\r\n      const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n          return squares[a];\r\n        }\r\n      }\r\n      return null;\r\n    }"],"sourceRoot":""}